# A kubernetes cron job that will periodically (every 6 hrs) copy all of the data
# from the project's bitnami database into a new crunchy database.
#
# TODO :: GjB :: this manifest can be removed once the migration to the new crunchy
# database has been completed.
#
# ⚠️⚠️⚠️ IMPORTANT ⚠️⚠️⚠️
#
# Removing this manifest will not delete the kubernetes cron job from the production
# cluster. To delete the cron job from the production cluster, use the following command:
#
# kubectl --kubeconfig ~/.kube/dts-prod-sced-rhp-spoke-aks.yaml --namespace passport-status delete cronjob bitnami-to-crunchy-db-backup

apiVersion: batch/v1
kind: CronJob
metadata:
  name: bitnami-to-crunchy-db-backup
spec:
  #
  # Note: this job must be suspended before database migration begins!
  #
  suspend: true
  schedule: 0 */6 * * * # Run at 00h00, 06h00, 12h00, and 18h00
  concurrencyPolicy: Forbid # skips the new job run the previous job run hasn't finished yet
  jobTemplate:
    spec:
      backoffLimit: 0 # if the job fails for any reason, stop (don't try again)
      template:
        spec:
          restartPolicy: Never # if the container barfs or is forcefully terminated, stop
          containers:
            - name: db-copy
              image: docker.io/postgres:15
              env:
                # the bitnami source database to copy from
                - name: SRCHOST
                  value: prod-postgresql-ha-pgpool
                # the crunchy destination database to copy to
                - name: DSTHOST
                  value: passport-status-db-prod-pgbouncer
                # Note: PGUSER, PGPASSWORD, and PGDATABASE are all environment variables
                #       that will be automatically read by `pg_dump`, `psql`, and `pg_restore`
                - name: PGUSER
                  value: passport-status
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: prod-postgresql-ha-postgresql
                      key: postgresql-password
                - name: PGDATABASE
                  value: passport-status
              command:
                # Note: the `|| [ $? -eq 1 ]` check at the end will effectively absorb an exit
                #       code of `1`, which incidcates a succesful restore with minor errors
                - /bin/bash
                - -c
                - >
                  psql --host $DSTHOST --command 'CREATE EXTENSION IF NOT EXISTS unaccent;'
                  && pg_dump --format c --host $SRCHOST --schema public > /tmp/pg_dump.sql
                  && ls -lh /tmp/pg_dump.sql
                  && pg_restore --clean --host $DSTHOST --dbname passport-status --if-exists /tmp/pg_dump.sql
                  || [ $? -eq 1 ]
